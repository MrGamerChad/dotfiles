"this executes plug to load plugins
call plug#begin( '~/.vim/plugged' )
	Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeTabsToggle' } | Plug 'jistr/vim-nerdtree-tabs'
	Plug 'SirVer/ultisnips'  | Plug 'honza/vim-snippets'
	Plug 'Shougo/neocomplete.vim'
	Plug 'kien/ctrlp.vim'
	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-fugitive'
	Plug 'vim-airline/vim-airline' | Plug 'edkolev/tmuxline.vim'
	Plug 'tpope/vim-dispatch', { 'for': [ 'cs', 'html' ] }
	Plug 'scrooloose/syntastic', { 'for': 'cs' }
	Plug 'OmniSharp/omnisharp-vim', { 'for': 'cs' }
	Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'html'] }
	Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }
	Plug 'ap/vim-css-color'
	Plug 'jelera/vim-javascript-syntax'
call plug#end()

" remaps "
""""""""""
map <C-f> :NERDTreeTabsToggle<CR>
nnoremap <f2> :call NumberToggle()<cr>
nnoremap <f3> :call HlToggle()<cr>
nmap <F7> <Plug>ColorstepPrev<CR>
nmap <F8> <Plug>ColorstepNext<CR>
nnoremap <F9> :Dispatch<CR>
"this adds sudo saving support, with the command sudow
command Sw :execute ':silent w !sudo tee % > /dev/null' | :edit!
"lets me switch between python2 and python3 syntax checkers
cnoreabbrev Py2 let g:syntastic_python_checkers=['python2']
cnoreabbrev Py3 let g:syntastic_python_checkers=['python3']

" ctrlp fuzzy finder "
""""""""""""""""""""""
let g:ctrlp_working_path_mode = 'wa'

"  snippets  "
""""""""""""""""""""""
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Dispatch "
""""""""""""""""""""""
augroup DFOperations
	autocmd FileType html let b:dispatch = 'firefox %'
augroup END

" omni-sharp " {{{
let g:OmniSharp_selector_ui = 'ctrlp'  " Use ctrlp.vim
set noshowmatch
augroup omnisharp_commands
    autocmd!

    "Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)
    autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

    " Synchronous build (blocks Vim)
    "autocmd FileType cs nnoremap <F5> :wa!<cr>:OmniSharpBuild<cr>
    " Builds can also run asynchronously with vim-dispatch installed
    autocmd FileType cs nnoremap <leader>b :wa!<cr>:OmniSharpBuildAsync<cr>
    " automatic syntax check on events (TextChanged requires Vim 7.4)
    autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck

    " Automatically add new cs files to the nearest project on save
    autocmd BufWritePost *.cs call OmniSharp#AddToProject()

    "show type information automatically when the cursor stops moving
    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

    "The following commands are contextual, based on the current cursor position.

    autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition<cr>
    autocmd FileType cs nnoremap <leader>fi :OmniSharpFindImplementations<cr>
    autocmd FileType cs nnoremap <leader>ft :OmniSharpFindType<cr>
    autocmd FileType cs nnoremap <leader>fs :OmniSharpFindSymbol<cr>
    autocmd FileType cs nnoremap <leader>fu :OmniSharpFindUsages<cr>
    "finds members in the current buffer
    autocmd FileType cs nnoremap <leader>fm :OmniSharpFindMembers<cr>
    " cursor can be anywhere on the line containing an issue
    autocmd FileType cs nnoremap <leader>x  :OmniSharpFixIssue<cr>
    autocmd FileType cs nnoremap <leader>fx :OmniSharpFixUsings<cr>
    autocmd FileType cs nnoremap <leader>tt :OmniSharpTypeLookup<cr>
    autocmd FileType cs nnoremap <leader>dc :OmniSharpDocumentation<cr>
    "navigate up by method/property/field
    autocmd FileType cs nnoremap <C-K> :OmniSharpNavigateUp<cr>
    "navigate down by method/property/field
    autocmd FileType cs nnoremap <C-J> :OmniSharpNavigateDown<cr>

augroup END
"}}}

" syntastic "
""""""""""""""""""""""
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height = 3

let g:syntastic_python_checkers = [ '' ]
let g:syntastic_c_checkers = [ '' ]
let g:syntastic_cpp_checkers = [ '' ]
let g:syntastic_css = [ 'syntax', 'semantic', 'issues' ]
let g:syntastic_ruby_checkers = [ '' ]
let g:syntastic_cs_checkers = ['syntax', 'semantic', 'issues']

" random options "
""""""""""""""""""
set number	"line numbers on the left
set norelativenumber "normal numbers as default
set nocompatible	"no vi compatibility
set noexrc	"don't use ~/.exrc config
set cursorline "highlight the current line
set noerrorbells "no audio bell aka beeping
set novisualbell "no visual bell aka blinking
set incsearch "search while typing
set mouse=a "Use mouse to navigate the file
set ttyfast "faster scrolling
set ttimeoutlen=50
set lazyredraw "less redraws
set splitbelow "shows info or documentation below code, so code doesn't move

set shell=/bin/zsh "shell to use
set t_vb=	"disable all bells
set undolevels=1000	"undo levels
set foldmethod=marker "allow marking folds
filetype plugin indent on
syntax on	"color syntax highlighting
filetype plugin on	"load the filetype specific config
set omnifunc=syntaxcomplete#Complete "Omnicomplete ON
au BufNewFile,BufRead,BufEnter *.c,*.h set omnifunc=ccomplete#Complete

" indent options "
""""""""""""""""""
set autoindent	"set indenting
set ts=4	"set tab space
set sw=2	"set soft tab
set noexpandtab	"do not expand a tab to spaces
set shiftwidth=4	"set autoindent to one tab


" color options "
"""""""""""""""""
set t_Co=16
colorscheme deviantfero
"this defines the number of the colums
hi LineNr ctermfg=249 ctermbg=234
"hi CursorLineNr ctermfg=16 ctermbg=8


" racket preferences for vim            "
"""""""""""""""""""""""""""""""""""""""""
autocmd BufNewFile,BufRead *.rkt set noautoindent
autocmd BufNewFile,BufRead *.rkt set ts=2
autocmd BufNewFile,BufRead *.rkt set sw=2
autocmd BufNewFile,BufRead *.rkt set expandtab

" vim powerline "
"""""""""""""""""
set laststatus=2
let $PYTHONPATH='/usr/lib/python2/site-packages'
let g:airline_powerline_fonts = 0
let g:airline_extensions = ['branch','tabline','ctrlp']
autocmd FileType cs let g:airline_extensions = ['branch','tabline','ctrlp', 'syntastic']
let g:tmuxline_powerline_separators = 0
let g:airline_left_sep = ' '
let g:airline_right_sep = ' '
"let g:airline_section_y = '%{getcwd()}'
let g:airline_theme = 'wombat'
"updates tmuxline
if strlen($TMUX) > 0
	autocmd VimEnter * Tmuxline airline_insert crosshair
	autocmd VimEnter * TmuxlineSnapshot! ~/.tmuxline
endif

" TTY only "
""""""""""""
if &term=~"linux"
	colorscheme peachpuff
	let g:airline_theme = 'behelit'
endif

" for autocompletion  "{{{
"""""""""""""""""""""""
"important for java completion
silent! let g:EclimCompletionMethod = 'omnifunc'
autocmd CompleteDone * pclose
let g:acp_enableAtStartup = 0 " Disable AutoComplPop
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
			\ 'default' : '',
			\ 'vimshell' : $HOME.'/.vimshell_hist',
			\ 'scheme' : $HOME.'/.gosh_completions'
			\ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
	let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
	return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
	" For no inserting <CR> key.
	"return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
let g:neocomplete#enable_auto_select = 0

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
	let g:neocomplete#sources#omni#input_patterns = {}
endif

let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.java = '\h\w*\.\w*'
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.cs = '.*[^=\);]'
"}}}
