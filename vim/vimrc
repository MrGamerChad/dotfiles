"this executes plug to load plugins
call plug#begin( '~/.vim/plugged' )
	"Editing
	Plug 'cohama/lexima.vim'
	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-sleuth'
	Plug 'tpope/vim-repeat'
	Plug 'vim-scripts/tComment'
	"Navigation
	Plug 'junegunn/vim-easy-align'
	Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
	Plug 'junegunn/fzf.vim'
	Plug 'tpope/vim-vinegar'
	Plug 'majutsushi/tagbar'
	"Syntax
	Plug 'elixir-lang/vim-elixir'
	Plug 'mattreduce/vim-mix'
	Plug 'mattn/emmet-vim', { 'for': ['html', 'php', 'jsp', 'javascript'] }
	Plug 'vim-ruby/vim-ruby'
	"Autocomplete additions
	Plug 'SirVer/ultisnips'  | Plug 'honza/vim-snippets'
	Plug 'alvan/vim-closetag'
	Plug 'Valloric/YouCompleteMe', { 'do': './install.py --tern-completer' }
	Plug 'slashmili/alchemist.vim', { 'for': 'elixir' }
	Plug 'w0rp/ale'
	"LaTeX
	Plug 'lervag/vimtex'
	"Git
	Plug 'tpope/vim-fugitive'
call plug#end()

" remaps "
""""""""""
nmap <C-f> :GitFiles<cr>
nmap <C-p> :Files<cr>
nmap <C-o> :Buffers<cr>
nnoremap <f4> :call NumberToggle()<cr>
nnoremap <f3> :call HlToggle()<cr>
nmap <f8> :TagbarToggle<cr>
nmap <F9> :Gstatus<cr>

"Move more easily between splits
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
"for easy-align plugin.
xmap ea :LiveEasyAlign<cr>
nmap ea :LiveEasyAlign<cr>


"this adds sudo saving support, with the command sudow
if !exists(':Sw')
  command Sw :execute ':silent w !sudo tee % > /dev/null' | :edit!
endif


"  snippets  "
""""""""""""""
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let python_highlight_all = 1

" random options "
""""""""""""""""""
set wmh=0 "set window minmal height
set wmw=0 "set window minmal width
set nowrap
set sj=-50 "set scrolling to emacs like
set regexpengine=1
set number	"line numbers on the left
set norelativenumber "normal numbers as default
set nocompatible	"no vi compatibility
set noexrc	"don't use ~/.exrc config
set nocursorline "faster drawing
set noerrorbells "no audio bell aka beeping
set novisualbell "no visual bell aka blinking
set incsearch "search while typing
set mouse=a "Use mouse to navigate the file
set ttyfast "faster scrolling
set ttimeoutlen=10
set lazyredraw "less redraws
set splitbelow "shows info or documentation below code, so code doesn't move
set wildmenu "emacs like command autocompletion

set shell=/bin/bash "shell to use
set t_vb=	"disable all bells
set undolevels=1000	"undo levels
set foldmethod=marker "allow marking folds
filetype plugin indent on
syntax on	"color syntax highlighting
filetype plugin on	"load the filetype specific config
let g:closetag_filenames = "*.html,*.xml,*.js" "autoclose tags in these files
let g:closetag_emptyTags_caseSensitive = 1

" indent options "
""""""""""""""""""
set autoindent	"set indenting
set ts=4	"set tab space
set sw=4        "set soft tab
" set noexpandtab	"do not expand a tab to spaces
set shiftwidth=4	"set autoindent to one tab
packadd! matchit


" color options "
"""""""""""""""""
set t_Co=256
colorscheme deviantferoc


" hpppl preferences for vim            "
"""""""""""""""""""""""""""""""""""""""""
autocmd BufNewFile,BufRead *.hpppl set syntax=hpppl
function! Relpath(filename)
    let cwd = getcwd()
    let s = substitute(a:filename, l:cwd . "/" , "", "")
    return s
endfunction

" vim airline "
"""""""""""""""""
set laststatus=2
let $PYTHONPATH='/usr/lib/python2/site-packages'
if has('statusline')
  " Broken down into easily includeable segments
  set statusline=\ \ %<%t\    " Filename
  set statusline+=%w%h%m%r " Options
  set statusline+=%{fugitive#statusline()} "  Git Hotness
  set statusline+=%=%4.40{Relpath(expand(\"%:p\"))}          " current dir
  set statusline+=%#warningmsg#
  set statusline+=%*
  set statusline+=\ %=[%{&ff}]            " format
  set statusline+=%y            " filetype
  set statusline+=%=\ \ %-8.(%l,%c%V%)\ %p%%\ \  "Right aligned file nav info
endif


" TTY only "
""""""""""""
if has("gui_running")
  set background=light
  colorscheme PaperColor
  set gfn=roboto\ mono\ 8
endif

"auto complete"
"""""""""""""""
silent! let g:EclimCompletionMethod = 'omnifunc'
let g:ycm_autoclose_preview_window_after_completion=1

"linters"
"""""""""
let g:ale_linters = {
  \'python':['flake8'],
  \'php':['php -l'],
  \'c++':['gcc'],
  \'tex':[],
\}
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0

"latex"
"""""""
let g:vimtex_view_method = 'mupdf'
