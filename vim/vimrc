"this executes pathogen to install plugins
execute pathogen#infect()

" remaps "
""""""""""
map <C-f> :NERDTreeTabsToggle<CR>
nnoremap <f2> :call NumberToggle()<cr>

" ctrlp fuzzy finder "
""""""""""""""""""""""
let g:ctrlp_working_path_mode = 'wa'

" random options "
""""""""""""""""""
set number	"line numbers on the left
set norelativenumber "normal numbers as default
set nocompatible	"no vi compatibility
set noexrc	"don't use ~/.exrc config
set cursorline "highlight the current line
set noerrorbells "no audio bell aka beeping
set novisualbell "no visual bell aka blinking
set incsearch "search while typing
set nohlsearch "don't highlight all search matches
set mouse=a "Use mouse to navigate the file

" indent options "
""""""""""""""""""
set autoindent	"set indenting
set ts=4	"set tab space
set sw=2	"set soft tab
set noexpandtab	"do not expand a tab to spaces
set shiftwidth=4	"set autoindent to one tab

" more random options "
"""""""""""""""""""""""
set shell=/bin/zsh "shell to use
set t_vb=	"disable all bells
set undolevels=1000	"undo levels
set foldmethod=marker "allow marking folds
filetype plugin indent on
syntax on	"color syntax highlighting
filetype plugin on	"load the filetype specific config
set omnifunc=syntaxcomplete#Complete "Omnicomplete ON
au BufNewFile,BufRead,BufEnter *.c,*.h set omnifunc=ccomplete#Complete

" color options "
"""""""""""""""""
set t_Co=16
colorscheme pablo

" changes to colorscheme "
""""""""""""""""""""""""""
"hi ColorColumn ctermbg=234
hi CursorLine ctermbg=234	cterm=none
hi CursorLineNr ctermfg=255
hi LineNr ctermfg=DarkGrey ctermbg=none


" Make vim recognize Y86 assembly files "
"""""""""""""""""""""""""""""""""""""""""
:autocmd BufNewFile,BufRead *.ys set ft=asm
:autocmd BufNewFile,BufRead *.ys set nosmartindent

" vim powerline "
"""""""""""""""""
set laststatus=2
let $PYTHONPATH='/usr/lib/python2/site-packages'
let g:airline_powerline_fonts = 1
let g:airline_extensions = ['branch','tabline']
let g:tmuxline_powerline_separators = 0
let g:airline_left_sep = ' '
let g:airline_right_sep = ' '
let g:airline_section_y = '%{getcwd()}'
let g:airline_theme = 'wombat'
"updates tmuxline
if strlen($TMUX) > 0
	autocmd VimEnter * Tmuxline airline_insert minimal
	autocmd VimEnter * TmuxlineSnapshot! ~/.tmuxline
endif

" TTY only "
""""""""""""
if &term=~"linux"
	colorscheme zellner
	let g:airline_theme = 'base16'
	hi ColorColumn ctermbg=234
	hi CursorLine ctermbg=234	cterm=none
	hi CursorLineNr ctermfg=255
endif

" for autocompletion  "
"""""""""""""""""""""""
"important for java completion
autocmd VimEnter *
	\  if exists( ':PingEclim' )
		\| let g:EclimCompletionMethod = 'omnifunc'
	\| endif
autocmd CompleteDone * pclose
let g:acp_enableAtStartup = 0 " Disable AutoComplPop
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
			\ 'default' : '',
			\ 'vimshell' : $HOME.'/.vimshell_hist',
			\ 'scheme' : $HOME.'/.gosh_completions'
			\ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
	let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
	return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
	" For no inserting <CR> key.
	"return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
let g:neocomplete#enable_auto_select = 0

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.

if !exists('g:neocomplete#sources#omni#input_patterns')
	let g:neocomplete#sources#omni#input_patterns = {}
endif

let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.java = '\h\w*\.\w*'
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
